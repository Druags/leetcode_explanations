class Solution:
    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:
        n = len(dist)  # инициализируем переменную, хранящую количество станций
        minSpeed, maxSpeed = 1, 10**7 + 1  # инициализируем два указателя: минимальную и максимальную скорость
        answer = -1  #  инициализируем переменную с ответом
        while minSpeed < maxSpeed:  # запускаем цикл для бинарного поиска
            midSpeed = minSpeed + (maxSpeed - minSpeed) // 2  # находим среднюю скорость для текущего минимума и максимума
            totalHours = 0.0  #  инициализируем переменную с часами, затраченными на дорогу
            for i in range(n - 1):  #  перебираем в цикле все станции, крмое последней      
                totalHours += ceil((dist[i]) / midSpeed)  # высчитываем время, за которое мы доберёмся до станции,
                # округляя его в большую сторону, тк поезда ходят только по целочисленным часам, а если приедем раньше, придётся ждать
           
            totalHours += dist[-1] / midSpeed  # высчитываем скорость, с которой сможем добраться до последней станции
            if totalHours > hour:  #  если время больше требуемого            
                minSpeed = midSpeed + 1  # поднимаем планку минимальной скорости
            else:  #  если скорость соответствует запросу              
                answer = midSpeed  # находим ответ
                maxSpeed = midSpeed  # уменьшаем планку максимальной скорости
        return answer  # возвращаем ответ
