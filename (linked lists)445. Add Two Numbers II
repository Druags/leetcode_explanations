
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev = None  # переменная, в которой будет храниться предыдущий элемент
        curr = head  # переменная, в которой будет храниться текущий элемент

        while curr:  # пока не закончится список
            nxt = curr.next  # копируем следующий элемент изначального списка
            curr.next = prev  # следующим элементом текущего нода становится предыдущий нод
            prev = curr  # сохраняем в переменной нод с изменённым следующим элементом
            curr = nxt  # сохраняем в переменную нод из изначального списка
        
        return prev  # возвращаем перевёрнутый список

    def helper(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummyHead = ListNode(0)  # создаём связанный список
        tail = dummyHead  # дополнительная ссылка на предыдущий связанный список(хвостик)
        carry = 0  # цифра для переноса в следующий порядок

        while l1 or l2 or carry:
            digit1 = l1.val if l1 else 0  # получаем цифру из первого списка
            digit2 = l2.val if l2 else 0  # получаем цифру из второго списка

            total = digit1 + digit2 + carry  # складываем их
            digit = total % 10  # цифра, которая останется в текущем порядке
            carry = total // 10  # цифра, которую нужно перенести в следующий порядок

            newNode = ListNode(digit)  # создаём новый нод из суммы двух цифр
            tail.next = newNode  # добавляем к связанному списку полученный нод
            tail = tail.next  # делаем хвостик ссылкой на следующий элемент(только что добавленный)

            l1 = l1.next if l1 else None  # выбираем следующий нод из первого списка
            l2 = l2.next if l2 else None  # выбираем следующий нод из второго списка

        result = dummyHead.next  # сохраняем в переменную связанный список, исключая ноль, которым он инициализировался
        return result  # возвращаем результат

    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: 
        l1 = self.reverseList(l1)  # разворачиваем первый связанный список
        l2 = self.reverseList(l2)  # разворачиваем второй связанный список
        ans = self.helper(l1, l2)  # суммируем элементы двух связанных списков по порядкам
        return self.reverseList(ans)  # возвращаем перевёрнутый связанный список
